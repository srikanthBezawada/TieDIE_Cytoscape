package org.cytoscape.tiedie.internal;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.model.CyColumn;
import org.cytoscape.model.CyNetwork;
import org.cytoscape.model.CyTable;
import org.cytoscape.tiedie.internal.logic.TieDieLogicThread;
import org.cytoscape.tiedie.internal.visuals.NodeAttributeListener;
import org.cytoscape.view.model.CyNetworkView;



/**
 *
 * @author SrikanthB
 * Creates new form TieDieStartMenu
 * Start button activates TieDieLogicThread.java which keeps the ball rolling
 */

public class TieDieGUI extends javax.swing.JPanel implements CytoPanelComponent {
    
    private TieDieCore tiediecore;
    public TieDieLogicThread logicThread;
    CyApplicationManager cyApplicationManager;
    CySwingApplication cyDesktopService;
    CyNetwork currentnetwork;
    CyNetworkView currentnetworkview;
    public CyActivator cyactivator;
    
    
   
    public TieDieGUI(CyActivator cyactivator,TieDieCore tiediecore) {
        this.cyactivator = cyactivator;
        this.tiediecore = tiediecore;
        cyApplicationManager = tiediecore.getCyApplicationManager();
        //this.currentnetwork = cyApplicationManager.getCurrentNetwork();
        //this.currentnetworkview = cyApplicationManager.getCurrentNetworkView();
        cyDesktopService = tiediecore.getCyDesktopService();
        initComponents();
        if(cyApplicationManager.getCurrentNetworkView() != null )
            upComboBox.setModel(new javax.swing.DefaultComboBoxModel(
                    NodeAttributeListener.getNodeAttributes(
                            cyApplicationManager.getCurrentNetworkView().getModel()).toArray()));
        upComboBox.setSelectedItem("None");
        if(cyApplicationManager.getCurrentNetworkView() != null )
            downComboBox.setModel(new javax.swing.DefaultComboBoxModel(
                    NodeAttributeListener.getNodeAttributes(
                            cyApplicationManager.getCurrentNetworkView().getModel()).toArray()));
        downComboBox.setSelectedItem("None");
    }
    
    public Icon getIcon() {
        return null;
    }
    
    public String getTitle() {
        return "TieDIE";
    }
    
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }
    
    public Component getComponent() {
        return this;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        upComboBox = new javax.swing.JComboBox();
        downComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        headingLabel = new javax.swing.JLabel();
        kernelRbutton = new javax.swing.JRadioButton();
        PagerankRbutton = new javax.swing.JRadioButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        startButton.setText("START executing TieDIE algorithm");
        startButton.setToolTipText("Make sure you imported the table files and selected the corresponding columns");
        startButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        helpButton.setForeground(new java.awt.Color(0, 200, 0));
        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        exitButton.setForeground(new java.awt.Color(200, 0, 0));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        statusLabel.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        statusLabel.setText("TieDIE status");

        upComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));

        downComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));

        jLabel1.setText("Upstream");

        jLabel2.setText("Downstream");

        headingLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        headingLabel.setForeground(new java.awt.Color(255, 0, 51));
        headingLabel.setText("   TieDIE ");

        buttonGroup1.add(kernelRbutton);
        kernelRbutton.setText("Heat Kernel");

        buttonGroup1.add(PagerankRbutton);
        PagerankRbutton.setText("Page Rank");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(headingLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79)
                                .addComponent(exitButton))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(14, 14, 14)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(downComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(upComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(kernelRbutton)
                                .addGap(37, 37, 37)
                                .addComponent(PagerankRbutton))
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 136, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(17, 17, 17)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kernelRbutton)
                    .addComponent(PagerankRbutton))
                .addGap(18, 18, 18)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(475, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(mainPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        tiediecore.closecore();
        tiediecore.closeTieDieStartMenu();
    }//GEN-LAST:event_exitButtonActionPerformed

    
    
    
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        currentnetwork = cyApplicationManager.getCurrentNetwork();
        currentnetworkview = cyApplicationManager.getCurrentNetworkView();
        //  start input validations
        String upComboSelected = inputNodeAttributeAndValidate(upComboBox);
        String downComboSelected = inputNodeAttributeAndValidate(downComboBox);
        
        if(upComboSelected == null && downComboSelected == null){
            JOptionPane.showMessageDialog(null, "Select the columns/heats to be considered for UPSTREAM & DOWNSTREAM after importing TABLE files", "Import TABLE files along with network file", JOptionPane.WARNING_MESSAGE);
            statusLabel.setText("TieDIE status");
            return;
        }
        
        if(upComboSelected == null){
            JOptionPane.showMessageDialog(null, "Select the columns/heats to be considered for UPSTREAM", "Import TABLE files along with network file", JOptionPane.WARNING_MESSAGE);
            statusLabel.setText("TieDIE status");
            return;
        }
        
        if(downComboSelected == null){
            JOptionPane.showMessageDialog(null, "Select the columns/heats to be considered for DOWNSTREAM", "Import TABLE files along with network file", JOptionPane.WARNING_MESSAGE);
            statusLabel.setText("TieDIE status");
            return;
        }
        /*
        CyTable nTable = currentnetwork.getDefaultNodeTable();
        if(nTable.getColumn(upComboSelected).getType() == Number.class && nTable.getColumn(downComboSelected).getType() == Number.class){
        } else{
             if((nTable.getColumn(upComboSelected).getType() != Number.class) || (nTable.getColumn(downComboSelected).getType() != Number.class)){
                JOptionPane.showMessageDialog(null, "Select the appropriate columns/heats to be considered for UPSTREAM & DOWNSTREAM", "Import TABLE files along with network file", JOptionPane.WARNING_MESSAGE);
                statusLabel.setText("TieDIE status");
                return;  
            }
            
            if((nTable.getColumn(upComboSelected).getType() != Number.class) && (nTable.getColumn(downComboSelected).getType() == Number.class)){
                JOptionPane.showMessageDialog(null, "Select the appropriate columns/heats to be considered for UPSTREAM", "Import TABLE files along with network file", JOptionPane.WARNING_MESSAGE);
                statusLabel.setText("TieDIE status");
                return;
            }
            
            if((nTable.getColumn(upComboSelected).getType() == Number.class) && (nTable.getColumn(upComboSelected).getType() != Number.class)){
                JOptionPane.showMessageDialog(null, "Select the appropriate columns/heats to be considered for UPSTREAM", "Import TABLE files along with network file", JOptionPane.WARNING_MESSAGE);
                statusLabel.setText("TieDIE status");
                return;
            }
        }
        */    
        
        if(kernelRbutton.isSelected() || PagerankRbutton.isSelected()){
        } else{
            JOptionPane.showMessageDialog(null, "Select either HeatKernel (or) PageRank based diffusion", "Select the WAY of diffusion", JOptionPane.WARNING_MESSAGE);
            statusLabel.setText("TieDIE status");
            return;
        }
        //  end input validations
        
        statusLabel.setText("Started executing TieDIE");
        boolean isKernel = kernelRbutton.isSelected();
        logicThread = new TieDieLogicThread(currentnetwork, currentnetworkview, upComboSelected, downComboSelected, isKernel);
        logicThread.start();
        try {
            if(isKernel){
                Thread.sleep(2500);
            }else{
                Thread.sleep(3000);
            }   
        } catch (InterruptedException ex) {
            Logger.getLogger(TieDieGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        statusLabel.setText("SubNetwork extracted->Check Control panel");
    }//GEN-LAST:event_startButtonActionPerformed


    
    
    
    
    
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        TieDieHelp help = new TieDieHelp();		        
        help.setText(1);		
        help.setVisible(true);
        
      
    }//GEN-LAST:event_helpButtonActionPerformed

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton PagerankRbutton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox downComboBox;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel headingLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton kernelRbutton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JComboBox upComboBox;
    // End of variables declaration//GEN-END:variables

    public String inputNodeAttributeAndValidate(javax.swing.JComboBox jcb){
        String nodeAttribute = jcb.getSelectedItem().toString();
        if(nodeAttribute.equals("None")){
            nodeAttribute = null;
            return nodeAttribute;
        } else {
            System.out.println("using "+nodeAttribute+" as node attribute.");
            return nodeAttribute;
        }
    }
    
    public javax.swing.JComboBox getNodeAttributeComboBox1(){
        return upComboBox;
    }

    public javax.swing.JComboBox getNodeAttributeComboBox2(){
        return downComboBox;
    }
    
}
